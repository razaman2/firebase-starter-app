// https://firebase.google.com/docs/reference/rules/rules
// https://firebase.google.com/docs/firestore/security/overview
// https://firebase.google.com/docs/firestore

rules_version = '2';
service cloud.firestore {
    match /databases/{database}/documents {
        function signedIn() {
            return (request.auth != null);
        }

        function userData() {
            return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
        }

        function userRole(roleId) {
            return get(/databases/$(database)/documents/users/$(request.auth.uid)/roles/$(roleId)).data;
        }

        function userSettings(companyId) {
            return get(/databases/$(database)/documents/users/$(request.auth.uid)/settings/$(companyId)).data;
        }

        function companySettings(companyId) {
            return get(/databases/$(database)/documents/companies/$(companyId)/settings/$(companyId)).data;
        }

        function companyExists(companyId) {
            return exists(/databases/$(database)/documents/companies/$(companyId));
        }

        function roleExists(roleId) {
            return exists(/databases/$(database)/documents/roles/$(roleId));
        }

        function storedData() {
            return resource.data;
        }

        function incomingData() {
            return request.resource.data;
        }

        function userHasRole(roleId) {
            return (userRole(roleId) != null);
        }

        function userHasCompanyRole(roleId, companyId) {
            return userRole(roleId).get("belongsTo", []).hasAny([companyId + " companies"]);
        }

        function isCreator() {
            return (request.auth.uid == storedData().createdBy);
        }

        function isOwner() {
            let userPath = path("/databases/" + database + "/documents/users/" + request.auth.uid);

            return (
                storedData().get("belongsTo", []).hasAny([request.auth.uid + " users"])
                || ((userPath[0] == request.path[0])
                && (userPath[1] == request.path[1])
                && (userPath[2] == request.path[2])
                && (userPath[3] == request.path[3])
                && (userPath[4] == request.path[4]))
            );
        }

        function diffData() {
            return incomingData().diff(storedData());
        }

        function incomingDataHasOnly(keys) {
            return diffData().affectedKeys().hasOnly(keys);
        }

        function incomingDataHasAny(keys) {
            return diffData().affectedKeys().hasAny(keys);
        }

        function incomingDataHasAll(keys) {
            return diffData().affectedKeys().hasAll(keys);
        }

        function authorized() {
            return true;
        }

        match /companies/{companyId} {
            allow read: if signedIn();

            allow update: if (
                userHasRole("super")
                || userHasRole("admin")
            );

            // only super users can create and delete companies.
            allow create, delete: if userHasRole("super");

            match /secure-data/{secureDataId} {
                allow create: if signedIn();
            }

            match /settings/{settingsId} {
                allow get: if signedIn();

                allow create, delete: if userHasRole("super");

                allow update: if (
                    userHasRole("super")
                    || (userHasRole("admin")
                    && diffData().affectedKeys().hasOnly(["global", "updatedAt"]))
                );
            }

            match /updates/{updateId} {
                allow read: if signedIn();

                // update must belong to this company.
                allow create: if incomingData().get("belongsTo", []).hasAny([companyId + " companies"]);
            }

            // START COMPANY CUSTOM RULES //
        }

        match /roles/{roleId} {
            allow read: if signedIn();

            // allow the creation of the application's super role.
            allow create: if (roleId == "super");

            // only super users can write roles.
            allow write: if (
                roleExists("super")
                && userHasRole("super")
            );
        }

        match /settings/{settingsId} {
            allow get: if signedIn();

            // only super users can write app settings.
            allow create, update: if userHasRole("super");
        }

        match /updates/{updateId} {
            allow read, create: if signedIn();
        }

        match /users/{userId} {
            allow get, update: if (
                isOwner()
                || userHasRole("admin")
                || userHasRole("super")
            );

            allow list, create, delete: if (
                userHasRole("admin")
                || userHasRole("super")
            );

            match /roles/{roleId} {
                allow read: if signedIn();

                allow create: if (
                    roleExists(roleId)
                    && (((roleId != "super") && userHasRole("admin"))
                    || userHasRole("super"))
                );

                // assign super role to the creator of the app's super role.
                allow create: if (
                    !roleExists(roleId)
                    && (roleId == "super")
                )

                allow update: if (
                    diffData().affectedKeys().hasOnly(["global", "belongsTo", "updatedAt"])
                    && (((roleId != "super") && userHasRole("admin"))
                    || userHasRole("super"))
                );

                allow delete: if (
                    !storedData().belongsTo.join("|").matches(".+ companies")
                    && (((roleId != "super") && userHasRole("admin"))
                    || userHasRole("super"))
                );
            }

            match /secure-data/{secureDataId} {
                allow create: if signedIn();
            }

            match /settings/{companyId} {
                allow read: if signedIn();

                allow create: if (
                    companyExists(companyId)
                    && (userHasRole("admin") || userHasRole("super"))
                );

                allow update: if (
                    userHasRole("admin")
                    || userHasRole("super")
                    || (isOwner() && diffData().affectedKeys().hasOnly(["global", "updatedAt"]))
                );
            }

            match /updates/{updateId} {
                allow read: if signedIn();

                // update must belong to this user.
                allow create: if incomingData().get("belongsTo", []).hasAny([userId + " users"]);
            }

            // START USERS CUSTOM RULES //
        }

        match /tests/{testId}/{path=**} {
            allow read, write: if authorized();
        }
    }
}
